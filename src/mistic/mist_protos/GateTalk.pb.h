// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GateTalk.proto

#ifndef PROTOBUF_GateTalk_2eproto__INCLUDED
#define PROTOBUF_GateTalk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace trendmicro {
namespace mist {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GateTalk_2eproto();
void protobuf_AssignDesc_GateTalk_2eproto();
void protobuf_ShutdownFile_GateTalk_2eproto();

class Connection;
class Channel;
class Session;
class Client;
class Request;
class Response;
class Command;

enum Channel_Type {
  Channel_Type_QUEUE = 0,
  Channel_Type_TOPIC = 1
};
bool Channel_Type_IsValid(int value);
const Channel_Type Channel_Type_Type_MIN = Channel_Type_QUEUE;
const Channel_Type Channel_Type_Type_MAX = Channel_Type_TOPIC;
const int Channel_Type_Type_ARRAYSIZE = Channel_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Channel_Type_descriptor();
inline const ::std::string& Channel_Type_Name(Channel_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Channel_Type_descriptor(), value);
}
inline bool Channel_Type_Parse(
    const ::std::string& name, Channel_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Channel_Type>(
    Channel_Type_descriptor(), name, value);
}
enum Client_Type {
  Client_Type_CONSUMER = 0,
  Client_Type_PRODUCER = 1
};
bool Client_Type_IsValid(int value);
const Client_Type Client_Type_Type_MIN = Client_Type_CONSUMER;
const Client_Type Client_Type_Type_MAX = Client_Type_PRODUCER;
const int Client_Type_Type_ARRAYSIZE = Client_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Client_Type_descriptor();
inline const ::std::string& Client_Type_Name(Client_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Client_Type_descriptor(), value);
}
inline bool Client_Type_Parse(
    const ::std::string& name, Client_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Client_Type>(
    Client_Type_descriptor(), name, value);
}
enum Client_Action {
  Client_Action_MOUNT = 0,
  Client_Action_UNMOUNT = 1
};
bool Client_Action_IsValid(int value);
const Client_Action Client_Action_Action_MIN = Client_Action_MOUNT;
const Client_Action Client_Action_Action_MAX = Client_Action_UNMOUNT;
const int Client_Action_Action_ARRAYSIZE = Client_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Client_Action_descriptor();
inline const ::std::string& Client_Action_Name(Client_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Client_Action_descriptor(), value);
}
inline bool Client_Action_Parse(
    const ::std::string& name, Client_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Client_Action>(
    Client_Action_descriptor(), name, value);
}
enum Request_Type {
  Request_Type_SESSION_LIST = 0,
  Request_Type_SESSION_DESTROY = 1,
  Request_Type_SESSION_CLEAN_FREE = 2,
  Request_Type_CLIENT_ATTACH = 3,
  Request_Type_CLIENT_DETACH = 4,
  Request_Type_DAEMON_STATUS = 5,
  Request_Type_SESSION_INFO = 6,
  Request_Type_PING = 7
};
bool Request_Type_IsValid(int value);
const Request_Type Request_Type_Type_MIN = Request_Type_SESSION_LIST;
const Request_Type Request_Type_Type_MAX = Request_Type_PING;
const int Request_Type_Type_ARRAYSIZE = Request_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor();
inline const ::std::string& Request_Type_Name(Request_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Type_descriptor(), value);
}
inline bool Request_Type_Parse(
    const ::std::string& name, Request_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Type>(
    Request_Type_descriptor(), name, value);
}
enum Request_Role {
  Request_Role_SESSION = 0,
  Request_Role_SINK = 1,
  Request_Role_SOURCE = 2
};
bool Request_Role_IsValid(int value);
const Request_Role Request_Role_Role_MIN = Request_Role_SESSION;
const Request_Role Request_Role_Role_MAX = Request_Role_SOURCE;
const int Request_Role_Role_ARRAYSIZE = Request_Role_Role_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Role_descriptor();
inline const ::std::string& Request_Role_Name(Request_Role value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Role_descriptor(), value);
}
inline bool Request_Role_Parse(
    const ::std::string& name, Request_Role* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Role>(
    Request_Role_descriptor(), name, value);
}
// ===================================================================

class Connection : public ::google::protobuf::Message {
 public:
  Connection();
  virtual ~Connection();
  
  Connection(const Connection& from);
  
  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Connection& default_instance();
  
  void Swap(Connection* other);
  
  // implements Message ----------------------------------------------
  
  Connection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host_name = 1;
  inline bool has_host_name() const;
  inline void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  inline const ::std::string& host_name() const;
  inline void set_host_name(const ::std::string& value);
  inline void set_host_name(const char* value);
  inline void set_host_name(const char* value, size_t size);
  inline ::std::string* mutable_host_name();
  inline ::std::string* release_host_name();
  
  // optional string host_port = 2 [default = ""];
  inline bool has_host_port() const;
  inline void clear_host_port();
  static const int kHostPortFieldNumber = 2;
  inline const ::std::string& host_port() const;
  inline void set_host_port(const ::std::string& value);
  inline void set_host_port(const char* value);
  inline void set_host_port(const char* value, size_t size);
  inline ::std::string* mutable_host_port();
  inline ::std::string* release_host_port();
  
  // required string username = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required string broker_type = 5 [default = ""];
  inline bool has_broker_type() const;
  inline void clear_broker_type();
  static const int kBrokerTypeFieldNumber = 5;
  inline const ::std::string& broker_type() const;
  inline void set_broker_type(const ::std::string& value);
  inline void set_broker_type(const char* value);
  inline void set_broker_type(const char* value, size_t size);
  inline ::std::string* mutable_broker_type();
  inline ::std::string* release_broker_type();
  
  // @@protoc_insertion_point(class_scope:com.trendmicro.mist.proto.Connection)
 private:
  inline void set_has_host_name();
  inline void clear_has_host_name();
  inline void set_has_host_port();
  inline void clear_has_host_port();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_broker_type();
  inline void clear_has_broker_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* host_name_;
  ::std::string* host_port_;
  ::std::string* username_;
  ::std::string* password_;
  ::std::string* broker_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_GateTalk_2eproto();
  friend void protobuf_AssignDesc_GateTalk_2eproto();
  friend void protobuf_ShutdownFile_GateTalk_2eproto();
  
  void InitAsDefaultInstance();
  static Connection* default_instance_;
};
// -------------------------------------------------------------------

class Channel : public ::google::protobuf::Message {
 public:
  Channel();
  virtual ~Channel();
  
  Channel(const Channel& from);
  
  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Channel& default_instance();
  
  void Swap(Channel* other);
  
  // implements Message ----------------------------------------------
  
  Channel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Channel_Type Type;
  static const Type QUEUE = Channel_Type_QUEUE;
  static const Type TOPIC = Channel_Type_TOPIC;
  static inline bool Type_IsValid(int value) {
    return Channel_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Channel_Type_Type_MIN;
  static const Type Type_MAX =
    Channel_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Channel_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Channel_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Channel_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Channel_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .com.trendmicro.mist.proto.Channel.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::com::trendmicro::mist::proto::Channel_Type type() const;
  inline void set_type(::com::trendmicro::mist::proto::Channel_Type value);
  
  // optional bool persistent = 3 [default = false];
  inline bool has_persistent() const;
  inline void clear_persistent();
  static const int kPersistentFieldNumber = 3;
  inline bool persistent() const;
  inline void set_persistent(bool value);
  
  // @@protoc_insertion_point(class_scope:com.trendmicro.mist.proto.Channel)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_persistent();
  inline void clear_has_persistent();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  int type_;
  bool persistent_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GateTalk_2eproto();
  friend void protobuf_AssignDesc_GateTalk_2eproto();
  friend void protobuf_ShutdownFile_GateTalk_2eproto();
  
  void InitAsDefaultInstance();
  static Channel* default_instance_;
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message {
 public:
  Session();
  virtual ~Session();
  
  Session(const Session& from);
  
  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();
  
  void Swap(Session* other);
  
  // implements Message ----------------------------------------------
  
  Session* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .com.trendmicro.mist.proto.Connection connection = 1;
  inline bool has_connection() const;
  inline void clear_connection();
  static const int kConnectionFieldNumber = 1;
  inline const ::com::trendmicro::mist::proto::Connection& connection() const;
  inline ::com::trendmicro::mist::proto::Connection* mutable_connection();
  inline ::com::trendmicro::mist::proto::Connection* release_connection();
  
  // @@protoc_insertion_point(class_scope:com.trendmicro.mist.proto.Session)
 private:
  inline void set_has_connection();
  inline void clear_has_connection();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::com::trendmicro::mist::proto::Connection* connection_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GateTalk_2eproto();
  friend void protobuf_AssignDesc_GateTalk_2eproto();
  friend void protobuf_ShutdownFile_GateTalk_2eproto();
  
  void InitAsDefaultInstance();
  static Session* default_instance_;
};
// -------------------------------------------------------------------

class Client : public ::google::protobuf::Message {
 public:
  Client();
  virtual ~Client();
  
  Client(const Client& from);
  
  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Client& default_instance();
  
  void Swap(Client* other);
  
  // implements Message ----------------------------------------------
  
  Client* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Client_Type Type;
  static const Type CONSUMER = Client_Type_CONSUMER;
  static const Type PRODUCER = Client_Type_PRODUCER;
  static inline bool Type_IsValid(int value) {
    return Client_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Client_Type_Type_MIN;
  static const Type Type_MAX =
    Client_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Client_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Client_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Client_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Client_Type_Parse(name, value);
  }
  
  typedef Client_Action Action;
  static const Action MOUNT = Client_Action_MOUNT;
  static const Action UNMOUNT = Client_Action_UNMOUNT;
  static inline bool Action_IsValid(int value) {
    return Client_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Client_Action_Action_MIN;
  static const Action Action_MAX =
    Client_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Client_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Client_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Client_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Client_Action_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // required .com.trendmicro.mist.proto.Channel channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline const ::com::trendmicro::mist::proto::Channel& channel() const;
  inline ::com::trendmicro::mist::proto::Channel* mutable_channel();
  inline ::com::trendmicro::mist::proto::Channel* release_channel();
  
  // required .com.trendmicro.mist.proto.Client.Type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::com::trendmicro::mist::proto::Client_Type type() const;
  inline void set_type(::com::trendmicro::mist::proto::Client_Type value);
  
  // required .com.trendmicro.mist.proto.Client.Action action = 4;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 4;
  inline ::com::trendmicro::mist::proto::Client_Action action() const;
  inline void set_action(::com::trendmicro::mist::proto::Client_Action value);
  
  // @@protoc_insertion_point(class_scope:com.trendmicro.mist.proto.Client)
 private:
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_action();
  inline void clear_has_action();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::com::trendmicro::mist::proto::Channel* channel_;
  ::google::protobuf::uint32 session_id_;
  int type_;
  int action_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GateTalk_2eproto();
  friend void protobuf_AssignDesc_GateTalk_2eproto();
  friend void protobuf_ShutdownFile_GateTalk_2eproto();
  
  void InitAsDefaultInstance();
  static Client* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Request_Type Type;
  static const Type SESSION_LIST = Request_Type_SESSION_LIST;
  static const Type SESSION_DESTROY = Request_Type_SESSION_DESTROY;
  static const Type SESSION_CLEAN_FREE = Request_Type_SESSION_CLEAN_FREE;
  static const Type CLIENT_ATTACH = Request_Type_CLIENT_ATTACH;
  static const Type CLIENT_DETACH = Request_Type_CLIENT_DETACH;
  static const Type DAEMON_STATUS = Request_Type_DAEMON_STATUS;
  static const Type SESSION_INFO = Request_Type_SESSION_INFO;
  static const Type PING = Request_Type_PING;
  static inline bool Type_IsValid(int value) {
    return Request_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Request_Type_Type_MIN;
  static const Type Type_MAX =
    Request_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Request_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Request_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Request_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Request_Type_Parse(name, value);
  }
  
  typedef Request_Role Role;
  static const Role SESSION = Request_Role_SESSION;
  static const Role SINK = Request_Role_SINK;
  static const Role SOURCE = Request_Role_SOURCE;
  static inline bool Role_IsValid(int value) {
    return Request_Role_IsValid(value);
  }
  static const Role Role_MIN =
    Request_Role_Role_MIN;
  static const Role Role_MAX =
    Request_Role_Role_MAX;
  static const int Role_ARRAYSIZE =
    Request_Role_Role_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Role_descriptor() {
    return Request_Role_descriptor();
  }
  static inline const ::std::string& Role_Name(Role value) {
    return Request_Role_Name(value);
  }
  static inline bool Role_Parse(const ::std::string& name,
      Role* value) {
    return Request_Role_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .com.trendmicro.mist.proto.Request.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::trendmicro::mist::proto::Request_Type type() const;
  inline void set_type(::com::trendmicro::mist::proto::Request_Type value);
  
  // optional string argument = 2 [default = ""];
  inline bool has_argument() const;
  inline void clear_argument();
  static const int kArgumentFieldNumber = 2;
  inline const ::std::string& argument() const;
  inline void set_argument(const ::std::string& value);
  inline void set_argument(const char* value);
  inline void set_argument(const char* value, size_t size);
  inline ::std::string* mutable_argument();
  inline ::std::string* release_argument();
  
  // optional .com.trendmicro.mist.proto.Request.Role role = 3;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline ::com::trendmicro::mist::proto::Request_Role role() const;
  inline void set_role(::com::trendmicro::mist::proto::Request_Role value);
  
  // @@protoc_insertion_point(class_scope:com.trendmicro.mist.proto.Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_argument();
  inline void clear_has_argument();
  inline void set_has_role();
  inline void clear_has_role();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* argument_;
  int type_;
  int role_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GateTalk_2eproto();
  friend void protobuf_AssignDesc_GateTalk_2eproto();
  friend void protobuf_ShutdownFile_GateTalk_2eproto();
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();
  
  Response(const Response& from);
  
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();
  
  void Swap(Response* other);
  
  // implements Message ----------------------------------------------
  
  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);
  
  // optional string context = 2 [default = ""];
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const char* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  
  // optional string exception = 3 [default = ""];
  inline bool has_exception() const;
  inline void clear_exception();
  static const int kExceptionFieldNumber = 3;
  inline const ::std::string& exception() const;
  inline void set_exception(const ::std::string& value);
  inline void set_exception(const char* value);
  inline void set_exception(const char* value, size_t size);
  inline ::std::string* mutable_exception();
  inline ::std::string* release_exception();
  
  // @@protoc_insertion_point(class_scope:com.trendmicro.mist.proto.Response)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_exception();
  inline void clear_has_exception();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* context_;
  ::std::string* exception_;
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_GateTalk_2eproto();
  friend void protobuf_AssignDesc_GateTalk_2eproto();
  friend void protobuf_ShutdownFile_GateTalk_2eproto();
  
  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();
  
  Command(const Command& from);
  
  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();
  
  void Swap(Command* other);
  
  // implements Message ----------------------------------------------
  
  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .com.trendmicro.mist.proto.Session session = 1;
  inline int session_size() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 1;
  inline const ::com::trendmicro::mist::proto::Session& session(int index) const;
  inline ::com::trendmicro::mist::proto::Session* mutable_session(int index);
  inline ::com::trendmicro::mist::proto::Session* add_session();
  inline const ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Session >&
      session() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Session >*
      mutable_session();
  
  // repeated .com.trendmicro.mist.proto.Client client = 2;
  inline int client_size() const;
  inline void clear_client();
  static const int kClientFieldNumber = 2;
  inline const ::com::trendmicro::mist::proto::Client& client(int index) const;
  inline ::com::trendmicro::mist::proto::Client* mutable_client(int index);
  inline ::com::trendmicro::mist::proto::Client* add_client();
  inline const ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Client >&
      client() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Client >*
      mutable_client();
  
  // repeated .com.trendmicro.mist.proto.Request request = 3;
  inline int request_size() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 3;
  inline const ::com::trendmicro::mist::proto::Request& request(int index) const;
  inline ::com::trendmicro::mist::proto::Request* mutable_request(int index);
  inline ::com::trendmicro::mist::proto::Request* add_request();
  inline const ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Request >&
      request() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Request >*
      mutable_request();
  
  // repeated .com.trendmicro.mist.proto.Response response = 4;
  inline int response_size() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 4;
  inline const ::com::trendmicro::mist::proto::Response& response(int index) const;
  inline ::com::trendmicro::mist::proto::Response* mutable_response(int index);
  inline ::com::trendmicro::mist::proto::Response* add_response();
  inline const ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Response >&
      response() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Response >*
      mutable_response();
  
  // @@protoc_insertion_point(class_scope:com.trendmicro.mist.proto.Command)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Session > session_;
  ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Client > client_;
  ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Request > request_;
  ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Response > response_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GateTalk_2eproto();
  friend void protobuf_AssignDesc_GateTalk_2eproto();
  friend void protobuf_ShutdownFile_GateTalk_2eproto();
  
  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// ===================================================================


// ===================================================================

// Connection

// required string host_name = 1;
inline bool Connection::has_host_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connection::set_has_host_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connection::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connection::clear_host_name() {
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    host_name_->clear();
  }
  clear_has_host_name();
}
inline const ::std::string& Connection::host_name() const {
  return *host_name_;
}
inline void Connection::set_host_name(const ::std::string& value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
}
inline void Connection::set_host_name(const char* value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
}
inline void Connection::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Connection::mutable_host_name() {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  return host_name_;
}
inline ::std::string* Connection::release_host_name() {
  clear_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_name_;
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host_port = 2 [default = ""];
inline bool Connection::has_host_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Connection::set_has_host_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Connection::clear_has_host_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Connection::clear_host_port() {
  if (host_port_ != &::google::protobuf::internal::kEmptyString) {
    host_port_->clear();
  }
  clear_has_host_port();
}
inline const ::std::string& Connection::host_port() const {
  return *host_port_;
}
inline void Connection::set_host_port(const ::std::string& value) {
  set_has_host_port();
  if (host_port_ == &::google::protobuf::internal::kEmptyString) {
    host_port_ = new ::std::string;
  }
  host_port_->assign(value);
}
inline void Connection::set_host_port(const char* value) {
  set_has_host_port();
  if (host_port_ == &::google::protobuf::internal::kEmptyString) {
    host_port_ = new ::std::string;
  }
  host_port_->assign(value);
}
inline void Connection::set_host_port(const char* value, size_t size) {
  set_has_host_port();
  if (host_port_ == &::google::protobuf::internal::kEmptyString) {
    host_port_ = new ::std::string;
  }
  host_port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Connection::mutable_host_port() {
  set_has_host_port();
  if (host_port_ == &::google::protobuf::internal::kEmptyString) {
    host_port_ = new ::std::string;
  }
  return host_port_;
}
inline ::std::string* Connection::release_host_port() {
  clear_has_host_port();
  if (host_port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_port_;
    host_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string username = 3;
inline bool Connection::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Connection::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Connection::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Connection::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Connection::username() const {
  return *username_;
}
inline void Connection::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Connection::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Connection::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Connection::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Connection::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 4;
inline bool Connection::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Connection::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Connection::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Connection::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Connection::password() const {
  return *password_;
}
inline void Connection::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Connection::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Connection::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Connection::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Connection::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string broker_type = 5 [default = ""];
inline bool Connection::has_broker_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Connection::set_has_broker_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Connection::clear_has_broker_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Connection::clear_broker_type() {
  if (broker_type_ != &::google::protobuf::internal::kEmptyString) {
    broker_type_->clear();
  }
  clear_has_broker_type();
}
inline const ::std::string& Connection::broker_type() const {
  return *broker_type_;
}
inline void Connection::set_broker_type(const ::std::string& value) {
  set_has_broker_type();
  if (broker_type_ == &::google::protobuf::internal::kEmptyString) {
    broker_type_ = new ::std::string;
  }
  broker_type_->assign(value);
}
inline void Connection::set_broker_type(const char* value) {
  set_has_broker_type();
  if (broker_type_ == &::google::protobuf::internal::kEmptyString) {
    broker_type_ = new ::std::string;
  }
  broker_type_->assign(value);
}
inline void Connection::set_broker_type(const char* value, size_t size) {
  set_has_broker_type();
  if (broker_type_ == &::google::protobuf::internal::kEmptyString) {
    broker_type_ = new ::std::string;
  }
  broker_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Connection::mutable_broker_type() {
  set_has_broker_type();
  if (broker_type_ == &::google::protobuf::internal::kEmptyString) {
    broker_type_ = new ::std::string;
  }
  return broker_type_;
}
inline ::std::string* Connection::release_broker_type() {
  clear_has_broker_type();
  if (broker_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = broker_type_;
    broker_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Channel

// required string name = 1;
inline bool Channel::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Channel::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Channel::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Channel::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Channel::name() const {
  return *name_;
}
inline void Channel::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Channel::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Channel::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Channel::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Channel::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .com.trendmicro.mist.proto.Channel.Type type = 2;
inline bool Channel::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Channel::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Channel::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Channel::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::trendmicro::mist::proto::Channel_Type Channel::type() const {
  return static_cast< ::com::trendmicro::mist::proto::Channel_Type >(type_);
}
inline void Channel::set_type(::com::trendmicro::mist::proto::Channel_Type value) {
  GOOGLE_DCHECK(::com::trendmicro::mist::proto::Channel_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool persistent = 3 [default = false];
inline bool Channel::has_persistent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Channel::set_has_persistent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Channel::clear_has_persistent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Channel::clear_persistent() {
  persistent_ = false;
  clear_has_persistent();
}
inline bool Channel::persistent() const {
  return persistent_;
}
inline void Channel::set_persistent(bool value) {
  set_has_persistent();
  persistent_ = value;
}

// -------------------------------------------------------------------

// Session

// required .com.trendmicro.mist.proto.Connection connection = 1;
inline bool Session::has_connection() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session::set_has_connection() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Session::clear_has_connection() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Session::clear_connection() {
  if (connection_ != NULL) connection_->::com::trendmicro::mist::proto::Connection::Clear();
  clear_has_connection();
}
inline const ::com::trendmicro::mist::proto::Connection& Session::connection() const {
  return connection_ != NULL ? *connection_ : *default_instance_->connection_;
}
inline ::com::trendmicro::mist::proto::Connection* Session::mutable_connection() {
  set_has_connection();
  if (connection_ == NULL) connection_ = new ::com::trendmicro::mist::proto::Connection;
  return connection_;
}
inline ::com::trendmicro::mist::proto::Connection* Session::release_connection() {
  clear_has_connection();
  ::com::trendmicro::mist::proto::Connection* temp = connection_;
  connection_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Client

// required uint32 session_id = 1;
inline bool Client::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Client::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Client::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Client::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 Client::session_id() const {
  return session_id_;
}
inline void Client::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// required .com.trendmicro.mist.proto.Channel channel = 2;
inline bool Client::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Client::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Client::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Client::clear_channel() {
  if (channel_ != NULL) channel_->::com::trendmicro::mist::proto::Channel::Clear();
  clear_has_channel();
}
inline const ::com::trendmicro::mist::proto::Channel& Client::channel() const {
  return channel_ != NULL ? *channel_ : *default_instance_->channel_;
}
inline ::com::trendmicro::mist::proto::Channel* Client::mutable_channel() {
  set_has_channel();
  if (channel_ == NULL) channel_ = new ::com::trendmicro::mist::proto::Channel;
  return channel_;
}
inline ::com::trendmicro::mist::proto::Channel* Client::release_channel() {
  clear_has_channel();
  ::com::trendmicro::mist::proto::Channel* temp = channel_;
  channel_ = NULL;
  return temp;
}

// required .com.trendmicro.mist.proto.Client.Type type = 3;
inline bool Client::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Client::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Client::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Client::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::trendmicro::mist::proto::Client_Type Client::type() const {
  return static_cast< ::com::trendmicro::mist::proto::Client_Type >(type_);
}
inline void Client::set_type(::com::trendmicro::mist::proto::Client_Type value) {
  GOOGLE_DCHECK(::com::trendmicro::mist::proto::Client_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .com.trendmicro.mist.proto.Client.Action action = 4;
inline bool Client::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Client::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Client::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Client::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::com::trendmicro::mist::proto::Client_Action Client::action() const {
  return static_cast< ::com::trendmicro::mist::proto::Client_Action >(action_);
}
inline void Client::set_action(::com::trendmicro::mist::proto::Client_Action value) {
  GOOGLE_DCHECK(::com::trendmicro::mist::proto::Client_Action_IsValid(value));
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// Request

// required .com.trendmicro.mist.proto.Request.Type type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::trendmicro::mist::proto::Request_Type Request::type() const {
  return static_cast< ::com::trendmicro::mist::proto::Request_Type >(type_);
}
inline void Request::set_type(::com::trendmicro::mist::proto::Request_Type value) {
  GOOGLE_DCHECK(::com::trendmicro::mist::proto::Request_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string argument = 2 [default = ""];
inline bool Request::has_argument() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_argument() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_argument() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_argument() {
  if (argument_ != &::google::protobuf::internal::kEmptyString) {
    argument_->clear();
  }
  clear_has_argument();
}
inline const ::std::string& Request::argument() const {
  return *argument_;
}
inline void Request::set_argument(const ::std::string& value) {
  set_has_argument();
  if (argument_ == &::google::protobuf::internal::kEmptyString) {
    argument_ = new ::std::string;
  }
  argument_->assign(value);
}
inline void Request::set_argument(const char* value) {
  set_has_argument();
  if (argument_ == &::google::protobuf::internal::kEmptyString) {
    argument_ = new ::std::string;
  }
  argument_->assign(value);
}
inline void Request::set_argument(const char* value, size_t size) {
  set_has_argument();
  if (argument_ == &::google::protobuf::internal::kEmptyString) {
    argument_ = new ::std::string;
  }
  argument_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_argument() {
  set_has_argument();
  if (argument_ == &::google::protobuf::internal::kEmptyString) {
    argument_ = new ::std::string;
  }
  return argument_;
}
inline ::std::string* Request::release_argument() {
  clear_has_argument();
  if (argument_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = argument_;
    argument_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .com.trendmicro.mist.proto.Request.Role role = 3;
inline bool Request::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::com::trendmicro::mist::proto::Request_Role Request::role() const {
  return static_cast< ::com::trendmicro::mist::proto::Request_Role >(role_);
}
inline void Request::set_role(::com::trendmicro::mist::proto::Request_Role value) {
  GOOGLE_DCHECK(::com::trendmicro::mist::proto::Request_Role_IsValid(value));
  set_has_role();
  role_ = value;
}

// -------------------------------------------------------------------

// Response

// required bool success = 1;
inline bool Response::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool Response::success() const {
  return success_;
}
inline void Response::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional string context = 2 [default = ""];
inline bool Response::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_context() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& Response::context() const {
  return *context_;
}
inline void Response::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void Response::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(value);
}
inline void Response::set_context(const char* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    context_ = new ::std::string;
  }
  return context_;
}
inline ::std::string* Response::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string exception = 3 [default = ""];
inline bool Response::has_exception() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_exception() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_exception() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_exception() {
  if (exception_ != &::google::protobuf::internal::kEmptyString) {
    exception_->clear();
  }
  clear_has_exception();
}
inline const ::std::string& Response::exception() const {
  return *exception_;
}
inline void Response::set_exception(const ::std::string& value) {
  set_has_exception();
  if (exception_ == &::google::protobuf::internal::kEmptyString) {
    exception_ = new ::std::string;
  }
  exception_->assign(value);
}
inline void Response::set_exception(const char* value) {
  set_has_exception();
  if (exception_ == &::google::protobuf::internal::kEmptyString) {
    exception_ = new ::std::string;
  }
  exception_->assign(value);
}
inline void Response::set_exception(const char* value, size_t size) {
  set_has_exception();
  if (exception_ == &::google::protobuf::internal::kEmptyString) {
    exception_ = new ::std::string;
  }
  exception_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_exception() {
  set_has_exception();
  if (exception_ == &::google::protobuf::internal::kEmptyString) {
    exception_ = new ::std::string;
  }
  return exception_;
}
inline ::std::string* Response::release_exception() {
  clear_has_exception();
  if (exception_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exception_;
    exception_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Command

// repeated .com.trendmicro.mist.proto.Session session = 1;
inline int Command::session_size() const {
  return session_.size();
}
inline void Command::clear_session() {
  session_.Clear();
}
inline const ::com::trendmicro::mist::proto::Session& Command::session(int index) const {
  return session_.Get(index);
}
inline ::com::trendmicro::mist::proto::Session* Command::mutable_session(int index) {
  return session_.Mutable(index);
}
inline ::com::trendmicro::mist::proto::Session* Command::add_session() {
  return session_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Session >&
Command::session() const {
  return session_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Session >*
Command::mutable_session() {
  return &session_;
}

// repeated .com.trendmicro.mist.proto.Client client = 2;
inline int Command::client_size() const {
  return client_.size();
}
inline void Command::clear_client() {
  client_.Clear();
}
inline const ::com::trendmicro::mist::proto::Client& Command::client(int index) const {
  return client_.Get(index);
}
inline ::com::trendmicro::mist::proto::Client* Command::mutable_client(int index) {
  return client_.Mutable(index);
}
inline ::com::trendmicro::mist::proto::Client* Command::add_client() {
  return client_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Client >&
Command::client() const {
  return client_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Client >*
Command::mutable_client() {
  return &client_;
}

// repeated .com.trendmicro.mist.proto.Request request = 3;
inline int Command::request_size() const {
  return request_.size();
}
inline void Command::clear_request() {
  request_.Clear();
}
inline const ::com::trendmicro::mist::proto::Request& Command::request(int index) const {
  return request_.Get(index);
}
inline ::com::trendmicro::mist::proto::Request* Command::mutable_request(int index) {
  return request_.Mutable(index);
}
inline ::com::trendmicro::mist::proto::Request* Command::add_request() {
  return request_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Request >&
Command::request() const {
  return request_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Request >*
Command::mutable_request() {
  return &request_;
}

// repeated .com.trendmicro.mist.proto.Response response = 4;
inline int Command::response_size() const {
  return response_.size();
}
inline void Command::clear_response() {
  response_.Clear();
}
inline const ::com::trendmicro::mist::proto::Response& Command::response(int index) const {
  return response_.Get(index);
}
inline ::com::trendmicro::mist::proto::Response* Command::mutable_response(int index) {
  return response_.Mutable(index);
}
inline ::com::trendmicro::mist::proto::Response* Command::add_response() {
  return response_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Response >&
Command::response() const {
  return response_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::Response >*
Command::mutable_response() {
  return &response_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mist
}  // namespace trendmicro
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::trendmicro::mist::proto::Channel_Type>() {
  return ::com::trendmicro::mist::proto::Channel_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::trendmicro::mist::proto::Client_Type>() {
  return ::com::trendmicro::mist::proto::Client_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::trendmicro::mist::proto::Client_Action>() {
  return ::com::trendmicro::mist::proto::Client_Action_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::trendmicro::mist::proto::Request_Type>() {
  return ::com::trendmicro::mist::proto::Request_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::trendmicro::mist::proto::Request_Role>() {
  return ::com::trendmicro::mist::proto::Request_Role_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GateTalk_2eproto__INCLUDED
