// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MistMessage.proto

#ifndef PROTOBUF_MistMessage_2eproto__INCLUDED
#define PROTOBUF_MistMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace trendmicro {
namespace mist {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MistMessage_2eproto();
void protobuf_AssignDesc_MistMessage_2eproto();
void protobuf_ShutdownFile_MistMessage_2eproto();

class KeyValuePair;
class MessageBlock;

// ===================================================================

class KeyValuePair : public ::google::protobuf::Message {
 public:
  KeyValuePair();
  virtual ~KeyValuePair();
  
  KeyValuePair(const KeyValuePair& from);
  
  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValuePair& default_instance();
  
  void Swap(KeyValuePair* other);
  
  // implements Message ----------------------------------------------
  
  KeyValuePair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:com.trendmicro.mist.proto.KeyValuePair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MistMessage_2eproto();
  friend void protobuf_AssignDesc_MistMessage_2eproto();
  friend void protobuf_ShutdownFile_MistMessage_2eproto();
  
  void InitAsDefaultInstance();
  static KeyValuePair* default_instance_;
};
// -------------------------------------------------------------------

class MessageBlock : public ::google::protobuf::Message {
 public:
  MessageBlock();
  virtual ~MessageBlock();
  
  MessageBlock(const MessageBlock& from);
  
  inline MessageBlock& operator=(const MessageBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageBlock& default_instance();
  
  void Swap(MessageBlock* other);
  
  // implements Message ----------------------------------------------
  
  MessageBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageBlock& from);
  void MergeFrom(const MessageBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required bytes message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // optional int64 ttl = 3;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 3;
  inline ::google::protobuf::int64 ttl() const;
  inline void set_ttl(::google::protobuf::int64 value);
  
  // repeated .com.trendmicro.mist.proto.KeyValuePair properties = 4;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  inline const ::com::trendmicro::mist::proto::KeyValuePair& properties(int index) const;
  inline ::com::trendmicro::mist::proto::KeyValuePair* mutable_properties(int index);
  inline ::com::trendmicro::mist::proto::KeyValuePair* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::KeyValuePair >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::KeyValuePair >*
      mutable_properties();
  
  // @@protoc_insertion_point(class_scope:com.trendmicro.mist.proto.MessageBlock)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_ttl();
  inline void clear_has_ttl();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* message_;
  ::google::protobuf::int64 ttl_;
  ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::KeyValuePair > properties_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_MistMessage_2eproto();
  friend void protobuf_AssignDesc_MistMessage_2eproto();
  friend void protobuf_ShutdownFile_MistMessage_2eproto();
  
  void InitAsDefaultInstance();
  static MessageBlock* default_instance_;
};
// ===================================================================


// ===================================================================

// KeyValuePair

// required string key = 1;
inline bool KeyValuePair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValuePair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValuePair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValuePair::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValuePair::key() const {
  return *key_;
}
inline void KeyValuePair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValuePair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValuePair::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValuePair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* KeyValuePair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool KeyValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValuePair::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KeyValuePair::value() const {
  return *value_;
}
inline void KeyValuePair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValuePair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValuePair::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValuePair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* KeyValuePair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MessageBlock

// required string id = 1;
inline bool MessageBlock::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageBlock::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageBlock::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageBlock::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MessageBlock::id() const {
  return *id_;
}
inline void MessageBlock::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MessageBlock::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MessageBlock::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageBlock::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MessageBlock::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes message = 2;
inline bool MessageBlock::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageBlock::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageBlock::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageBlock::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& MessageBlock::message() const {
  return *message_;
}
inline void MessageBlock::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void MessageBlock::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void MessageBlock::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageBlock::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* MessageBlock::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 ttl = 3;
inline bool MessageBlock::has_ttl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageBlock::set_has_ttl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageBlock::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageBlock::clear_ttl() {
  ttl_ = GOOGLE_LONGLONG(0);
  clear_has_ttl();
}
inline ::google::protobuf::int64 MessageBlock::ttl() const {
  return ttl_;
}
inline void MessageBlock::set_ttl(::google::protobuf::int64 value) {
  set_has_ttl();
  ttl_ = value;
}

// repeated .com.trendmicro.mist.proto.KeyValuePair properties = 4;
inline int MessageBlock::properties_size() const {
  return properties_.size();
}
inline void MessageBlock::clear_properties() {
  properties_.Clear();
}
inline const ::com::trendmicro::mist::proto::KeyValuePair& MessageBlock::properties(int index) const {
  return properties_.Get(index);
}
inline ::com::trendmicro::mist::proto::KeyValuePair* MessageBlock::mutable_properties(int index) {
  return properties_.Mutable(index);
}
inline ::com::trendmicro::mist::proto::KeyValuePair* MessageBlock::add_properties() {
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::KeyValuePair >&
MessageBlock::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::trendmicro::mist::proto::KeyValuePair >*
MessageBlock::mutable_properties() {
  return &properties_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mist
}  // namespace trendmicro
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MistMessage_2eproto__INCLUDED
